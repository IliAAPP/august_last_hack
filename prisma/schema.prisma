generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  role               UserRole
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  workerApplications Application[]
  bonusCard          BonusCard?
  receivedMessages   Message[]     @relation("ReceivedMessages")
  sentMessages       Message[]     @relation("SentMessages")
  penalties          Penalty[]
  profile            Profile?
  developerProjects  Project[]
}

model Profile {
  id             String  @id @default(uuid())
  userId         String  @unique
  firstName      String
  lastName       String
  phone          String?
  avatar         String?
  bio            String?
  experience     String?
  education      String?
  certifications String?
  user           User    @relation(fields: [userId], references: [id])
  skills         Skill[] @relation("ProfileToSkill")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  developerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  developer   User     @relation(fields: [developerId], references: [id])
}

model Order {
  id           String        @id @default(uuid())
  title        String
  description  String
  payment      Int
  startDate    DateTime
  endDate      DateTime?
  status       OrderStatus
  projectId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  project      Project       @relation(fields: [projectId], references: [id])
  requirements Requirement[]
}

model Requirement {
  id      String @id @default(uuid())
  text    String
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Application {
  id        String            @id @default(uuid())
  workerId  String
  orderId   String
  status    ApplicationStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  order     Order             @relation(fields: [orderId], references: [id])
  worker    User              @relation(fields: [workerId], references: [id])
}

model Skill {
  id       String    @id @default(uuid())
  name     String    @unique
  profiles Profile[] @relation("ProfileToSkill")
}

model Penalty {
  id          String   @id @default(uuid())
  userId      String
  description String
  amount      Int
  date        DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Review {
  id          String   @id @default(uuid())
  rating      Int
  comment     String?
  developerId String
  workerId    String
  orderId     String
  createdAt   DateTime @default(now())
}

model BonusCard {
  id            String   @id @default(uuid())
  cardNumber    String   @unique
  balance       Float
  frozenBalance Float
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  DEVELOPER
  WORKER
  ADMIN
}

enum OrderStatus {
  SEARCHING
  IN_PROGRESS
  WAITING_CONFIRMATION
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
